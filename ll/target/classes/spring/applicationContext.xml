<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd

       ">

	<description>Spring公共配置 </description>
    <context:property-placeholder ignore-unresolvable="true"
                                  location="classpath*:db.properties" />

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired,@service,@repository的属性被注入 -->
	<context:component-scan base-package="com.xyj.manage.service,com.ttpod.lucky.service">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="com.xyj.manage.dao,com.ttpod.lucky.dao"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="${hibernate.dialect}"/>
    </bean>

    <!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="com.xyj.manage.entity,com.ttpod.lucky.entity"/>
<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				 -->
                <!-- 用于调试的属性 -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <!--hibernate二级缓存 -->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!--<prop key="hibernate.enable_lazy_load_no_trans">true</prop>-->
                <prop key="hibernate.cache.provider_configuration_file_resource_path">classpath*:cache/ehcache.xml</prop>
                <prop key="hibernate.current_session_context_class">thread</prop>


                <!--关闭jsr-303验证 使用自定义验证
                <prop key="javax.persistence.validation.mode">NONE</prop>
                <prop key="javax.persistence.validation.factory">validator</prop>
                -->
                <!--不扫描hbm,这里全是注解 -->
                <prop key="hibernate.archive.autodetection">class</prop>

            </props>
		</property>
	</bean>


    <bean class="org.springframework.orm.hibernate4.HibernateExceptionTranslator"/>

    <!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

    <!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />



	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />



    <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- Connection Pooling Info -->
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <property name="maxIdle" value="${jdbc.pool.maxIdle}" />
        <property name="defaultAutoCommit" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="360000" />
        <property name="minEvictableIdleTimeMillis" value="1800000" />
        <property name="validationQuery" value="select 1 "/>
        <property name="testOnBorrow" value="false"/>
    </bean>




    <!--&lt;!&ndash; Jedis 连接池配置&ndash;&gt;-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxActive" value="${redis.pool.maxActive}" />-->
        <!--<property name="maxIdle" value="${redis.pool.maxIdle}" />-->
        <!--<property name="maxWait" value="${redis.pool.maxWait}" />-->
        <!--<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; Jedis ConnectionFactory 数据库连接配置&ndash;&gt;-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="hostName" value="${redis.hostname}" />-->
        <!--<property name="port" value="${redis.port}" />-->
        <!--<property name="password" value="${redis.password}" />-->
        <!--<property name="poolConfig" ref="jedisPoolConfig" />-->
        <!--&lt;!&ndash;<property name="hostName" value="xiayingjie.tk" />&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="port" value="6379" />&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="password" value="" />&ndash;&gt;-->
    <!--</bean>-->

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxActive" value="${redis.pool.maxActive}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxWait" value="${redis.pool.maxWait}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
        <property name="hostName" value="${redis.hostname}" />
        <property name="password" value="${redis.password}" />
        <property name="port" value="${redis.port}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>


    <!--&lt;!&ndash;redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷&ndash;&gt;-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connectionFactory-ref="jedisConnectionFactory"
           />
    <!--redis操作工具类-->
    <bean id="redisDAO" class="com.xyj.manage.tool.redis.spring.RedisSpringUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

</beans>